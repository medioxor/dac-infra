---

- name: Hostname -> DC
  win_hostname:
    name: dc
  register: res

- name: Reboot
  win_reboot:
  when: res.reboot_required

- name: Install RSAT-AD-PowerShell, RSAT-AD-AdminCenter, and AD-Domain-Services
  ansible.windows.win_feature:
    name:
      - RSAT-AD-PowerShell
      - RSAT-AD-AdminCenter
      - AD-Domain-Services
    state: present
    include_management_tools: yes

- name: Disable Complex Passwords
  win_shell: |
    Write-Host "$('[{0:HH:mm}]' -f (Get-Date)) Removing password complexity..."
    secedit /export /cfg C:\secpol.cfg
    (gc C:\secpol.cfg).replace("PasswordComplexity = 1", "PasswordComplexity = 0") | Out-File C:\secpol.cfg
    secedit /configure /db C:\Windows\security\local.sdb /cfg C:\secpol.cfg /areas SECURITYPOLICY
    rm -force C:\secpol.cfg -confirm:$false

- name: Create Domain
  win_shell: |
    Write-Host "$('[{0:HH:mm}]' -f (Get-Date)) Creating domain..."
    Import-Module ServerManager
    Import-Module ADDSDeployment
    $adminUser = [ADSI] "WinNT://$env:COMPUTERNAME/Administrator,User"
    $adminUser.SetPassword("deploy")
    $SecurePassword = "deploy" | ConvertTo-SecureString -AsPlainText -Force
    Install-ADDSForest `
      -SafeModeAdministratorPassword $SecurePassword `
      -CreateDnsDelegation:$false `
      -DatabasePath "C:\Windows\NTDS" `
      -DomainMode "7" `
      -DomainName "dac.local" `
      -DomainNetbiosName "DAC" `
      -ForestMode "7" `
      -InstallDns:$true `
      -LogPath "C:\Windows\NTDS" `
      -NoRebootOnCompletion:$true `
      -SysvolPath "C:\Windows\SYSVOL" `
      -Force:$true
  register: domain_creation
  changed_when: "'Status         : Success' in domain_creation.stdout"
  failed_when: "'Exception' in domain_creation.stderr"
  retries: 3

- name: Set IP Address
  win_shell: |
    Write-Host "$('[{0:HH:mm}]' -f (Get-Date)) Setting IP address..."
    $adapter = Get-NetAdapter | Where-Object { $_.MacAddress -eq "00-50-56-a3-b1-c3" }
    if (-not $adapter) {
      Write-Error "No adapter found with MAC address 00-50-56-a3-b1-c3"
      exit 1
    }
    $interfaceAlias = $adapter.InterfaceAlias
    $ip = "10.10.20.2"
    $prefixLength = 24
    $gateway = "10.10.20.1"
    $dnsServers = "1.1.1.1"
    Get-NetIPAddress -InterfaceAlias $interfaceAlias -AddressFamily IPv4 | Remove-NetIPAddress -Confirm:$false
    New-NetIPAddress -InterfaceAlias $interfaceAlias -IPAddress $ip -PrefixLength $prefixLength -DefaultGateway $gateway

- name: Remove stale DNS records
  win_shell: |
    Write-Host "$('[{0:HH:mm}]' -f (Get-Date)) Removing stale DNS records..."
    $RRs= Get-DnsServerResourceRecord -ZoneName dac.local -type 1 -Name "@"
    foreach($RR in $RRs) {
      if ( (Select-Object  -InputObject $RR HostName,RecordType -ExpandProperty RecordData).IPv4Address -ilike "10.*") {
        Remove-DnsServerResourceRecord -ZoneName dac.local -RRType A -Name "@" -RecordData $RR.RecordData.IPv4Address -Confirm
      }
    }
    Restart-Service DNS

- name: Reboot Afer Domain Creation
  win_reboot:
    msg: "Rebooting..."
    pre_reboot_delay: 15
    reboot_timeout: 600
    post_reboot_delay: 60

- name: Configure OU
  win_shell: |
    New-ADOrganizationalUnit -Name "Servers" -Server "dc.dac.local"
    New-ADOrganizationalUnit -Name "Workstations" -Server "dc.dac.local"
    New-ADOrganizationalUnit -Name "Workshop" -Server "dc.dac.local"
  register: ou_creation
  failed_when: "'Exception' in ou_creation.stderr"

- name: Create Subscription Groups
  win_shell: |
    if (-not ([Net.ServicePointManager]::SecurityProtocol).tostring().contains("Tls12")) {
      [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
    }
    Invoke-WebRequest -UseBasicParsing -Uri https://github.com/palantir/windows-event-forwarding/archive/master.zip -OutFile $env:USERPROFILE\Downloads\PalantirWEF.zip
    Expand-Archive -Path $env:USERPROFILE\Downloads\PalantirWEF.zip -DestinationPath $env:USERPROFILE\Downloads
    
    $rules=(Get-ChildItem -Path "$env:USERPROFILE\Downloads\windows-event-forwarding-master\wef-subscriptions" | where extension -eq .xml).BaseName
    $OUPath="OU=Workshop,dc=dac,dc=local"
    $OUName="WEF Rules"

    New-ADOrganizationalUnit -Name $OUName -Path $OUPath

    foreach ($ruleName in $rules){
      New-ADGroup -Name $ruleName -Path "OU=$OUName,$OUPath" -GroupScope Global
    }

- name: Copy WEF GPO
  ansible.windows.win_copy:
    src: ./resources/gpo
    dest: C:\Users\deploy\AppData\Local\Temp

- name: Assign GPOs to each OU
  win_shell: |
    $dcGPO = "Domain Controller Enhanced Auditing Policy"
    $serverGPO = "Server Enhanced Auditing Policy"
    $workstationGPO = "Workstation Enhanced Auditing Policy"
    $wefGPO = "Windows Event Forwarding"

    $OU = "ou=Domain Controllers,dc=dac,dc=local"
    Import-GPO -BackupGpoName $dcGPO -Path "C:\Users\deploy\AppData\Local\Temp\gpo" -TargetName $dcGPO -CreateIfNeeded
    New-GPLink -Name $dcGPO -Target $OU -Enforced yes
    Import-GPO -BackupGpoName $wefGPO -Path "C:\Users\deploy\AppData\Local\Temp\gpo" -TargetName $wefGPO -CreateIfNeeded
    New-GPLink -Name $wefGPO -Target $OU -Enforced yes

    $OU = "OU=Servers,dc=dac,dc=local"
    Import-GPO -BackupGpoName $serverGPO -Path "C:\Users\deploy\AppData\Local\Temp\gpo" -TargetName $serverGPO -CreateIfNeeded
    New-GPLink -Name $serverGPO -Target $OU -Enforced yes
    Import-GPO -BackupGpoName $wefGPO -Path "C:\Users\deploy\AppData\Local\Temp\gpo" -TargetName $wefGPO -CreateIfNeeded
    New-GPLink -Name $wefGPO -Target $OU -Enforced yes

    $OU = "OU=Workstations,dc=dac,dc=local"
    Import-GPO -BackupGpoName $workstationGPO -Path "C:\Users\deploy\AppData\Local\Temp\gpo" -TargetName $workstationGPO -CreateIfNeeded
    New-GPLink -Name $workstationGPO -Target $OU -Enforced yes
    Import-GPO -BackupGpoName $wefGPO -Path "C:\Users\deploy\AppData\Local\Temp\gpo" -TargetName $wefGPO -CreateIfNeeded
    New-GPLink -Name $wefGPO -Target $OU -Enforced yes
  register: assign_gpo
  failed_when: "'Exception' in assign_gpo.stdout"

- name: Downloading the Palantir WEF Configuration
  win_shell: |
    Write-Host "$('[{0:HH:mm}]' -f (Get-Date)) Downloading and unzipping the Palantir Windows Event Forwarding Repo from Github..."
    if (-not ([Net.ServicePointManager]::SecurityProtocol).tostring().contains("Tls12")){ #there is no need to set Tls12 in 1809 releases, therefore for insider it does not apply
      [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
    }
    Invoke-WebRequest -UseBasicParsing -Uri https://github.com/palantir/windows-event-forwarding/archive/master.zip -OutFile $env:USERPROFILE\AppData\Local\Temp\PalantirWEF.zip

    Expand-Archive -Path $env:USERPROFILE\AppData\Local\Temp\PalantirWEF.zip -DestinationPath $env:USERPROFILE\AppData\Local\Temp

    Write-Host "$('[{0:HH:mm}]' -f (Get-Date)) Palantir WEF download complete!"
  register: palantir_wef
  failed_when: "'Exception' in palantir_wef.stdout"

- name: Install Autoruns to Event Log
  win_shell: |
    Write-Host "$('[{0:HH:mm}]' -f (Get-Date)) Installing AutorunsToWinEventLog..."
    If ((Get-ScheduledTask -TaskName "AutorunsToWinEventLog" -ea silent) -eq $null) {
      (Get-Content $env:USERPROFILE\AppData\Local\Temp\windows-event-forwarding-master\AutorunsToWinEventLog\Install.ps1 -Raw) -replace 'Invoke-WebRequest -Uri "https://live.sysinternals.com/autorunsc64.exe" -OutFile "\$autorunsPath"', 'Try {
      (New-Object System.Net.WebClient).DownloadFile(''https://live.sysinternals.com/Autoruns64.exe'', $autorunsPath)
    }
    Catch {
      (New-Object System.Net.WebClient).DownloadFile(''http://live.sysinternals.com/Autoruns64.exe'', $autorunsPath)
    }' | Set-Content -Path "$env:USERPROFILE\AppData\Local\Temp\windows-event-forwarding-master\AutorunsToWinEventLog\Install.ps1"
        . $env:USERPROFILE\AppData\Local\Temp\windows-event-forwarding-master\AutorunsToWinEventLog\Install.ps1
        Write-Host "$('[{0:HH:mm}]' -f (Get-Date)) AutorunsToWinEventLog installed. Starting the scheduled task. Future runs will begin at 11am"
        Start-ScheduledTask -TaskName "AutorunsToWinEventLog"
        $Timeout = 30
        $timer = [Diagnostics.Stopwatch]::StartNew()
        while (($timer.Elapsed.TotalSeconds -lt $Timeout) -and ((Get-ScheduledTask -TaskName "AutorunsToWinEventLog").State -ne "Running")) {
          Start-Sleep -Seconds 3
          Write-Host "$('[{0:HH:mm}]' -f (Get-Date)) Still waiting for scheduled task to start after "$timer.Elapsed.Seconds" seconds..."
        }
        $timer.Stop()
        $Tsk = Get-ScheduledTask -TaskName "AutorunsToWinEventLog"
        if ($Tsk.State -ne "Running")
        {
          throw "AutorunsToWinEventLog scheduled tasks were not running after starting it"
        }
    }
    else
    {
      Write-Host "$('[{0:HH:mm}]' -f (Get-Date)) AutorunsToWinEventLog already installed. Moving On."
    }