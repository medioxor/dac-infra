---

- name: Hostname -> WEF
  win_hostname:
    name: wef
  register: res

- name: Reboot
  win_reboot:
  when: res.reboot_required

- name: Install RSAT-AD-PowerShell
  ansible.windows.win_feature:
    name:
      - RSAT-AD-PowerShell
    state: present
    include_management_tools: yes

- name: Set DNS to Domain Controller
  win_shell: |
    $DomainControllerIP = "10.10.20.2"
    Get-NetAdapter -Physical | ForEach-Object {
      Set-DnsClientServerAddress -InterfaceAlias $_.Name -ServerAddresses $DomainControllerIP
    }
    Get-NetAdapter -Physical | ForEach-Object {
      netsh interface ip set wins name="$($_.Name)" static $DomainControllerIP
    }

- name: Join WEF server to domain
  win_shell: |
    Write-Host "$('[{0:HH:mm}]' -f (Get-Date)) Joining domain..."
    ipconfig /renew
    $DomainUser = "dac.local\deploy"
    $DomainPassword = "deploy"
    $DomainName = "dac.local"
    $DomainCredential = New-Object System.Management.Automation.PSCredential ($DomainUser, (ConvertTo-SecureString $DomainPassword -AsPlainText -Force))
    Add-Computer -DomainName $DomainName -credential $DomainCredential -OUPath "ou=Servers,dc=dac,dc=local" -PassThru -ErrorAction Stop
  register: domain_join
  changed_when: "'True' in domain_join.stdout"
  failed_when: "'InvalidOperationException' in domain_join.stderr"

- name: Downloading the Palantir WEF Configuration
  win_shell: |
    Write-Host "$('[{0:HH:mm}]' -f (Get-Date)) Downloading and unzipping the Palantir Windows Event Forwarding Repo from Github..."
    if (-not ([Net.ServicePointManager]::SecurityProtocol).tostring().contains("Tls12")){ #there is no need to set Tls12 in 1809 releases, therefore for insider it does not apply
      [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
    }
    Invoke-WebRequest -UseBasicParsing -Uri https://github.com/palantir/windows-event-forwarding/archive/master.zip -OutFile $env:USERPROFILE\AppData\Local\Temp\PalantirWEF.zip

    Expand-Archive -Path $env:USERPROFILE\AppData\Local\Temp\PalantirWEF.zip -DestinationPath $env:USERPROFILE\AppData\Local\Temp

    Write-Host "$('[{0:HH:mm}]' -f (Get-Date)) Palantir WEF download complete!"
  register: palantir_wef
  failed_when: "'Exception' in palantir_wef.stdout"

- name: Install Autoruns to Event Log
  win_shell: |
    Write-Host "$('[{0:HH:mm}]' -f (Get-Date)) Installing AutorunsToWinEventLog..."
    If ((Get-ScheduledTask -TaskName "AutorunsToWinEventLog" -ea silent) -eq $null) {
      (Get-Content $env:USERPROFILE\AppData\Local\Temp\windows-event-forwarding-master\AutorunsToWinEventLog\Install.ps1 -Raw) -replace 'Invoke-WebRequest -Uri "https://live.sysinternals.com/autorunsc64.exe" -OutFile "\$autorunsPath"', 'Try {
      (New-Object System.Net.WebClient).DownloadFile(''https://live.sysinternals.com/Autoruns64.exe'', $autorunsPath)
    }
    Catch {
      (New-Object System.Net.WebClient).DownloadFile(''http://live.sysinternals.com/Autoruns64.exe'', $autorunsPath)
    }' | Set-Content -Path "$env:USERPROFILE\AppData\Local\Temp\windows-event-forwarding-master\AutorunsToWinEventLog\Install.ps1"
        . $env:USERPROFILE\AppData\Local\Temp\windows-event-forwarding-master\AutorunsToWinEventLog\Install.ps1
        Write-Host "$('[{0:HH:mm}]' -f (Get-Date)) AutorunsToWinEventLog installed. Starting the scheduled task. Future runs will begin at 11am"
        Start-ScheduledTask -TaskName "AutorunsToWinEventLog"
        $Timeout = 30
        $timer = [Diagnostics.Stopwatch]::StartNew()
        while (($timer.Elapsed.TotalSeconds -lt $Timeout) -and ((Get-ScheduledTask -TaskName "AutorunsToWinEventLog").State -ne "Running")) {
          Start-Sleep -Seconds 3
          Write-Host "$('[{0:HH:mm}]' -f (Get-Date)) Still waiting for scheduled task to start after "$timer.Elapsed.Seconds" seconds..."
        }
        $timer.Stop()
        $Tsk = Get-ScheduledTask -TaskName "AutorunsToWinEventLog"
        if ($Tsk.State -ne "Running")
        {
          throw "AutorunsToWinEventLog scheduled tasks were not running after starting it"
        }
    }
    else
    {
      Write-Host "$('[{0:HH:mm}]' -f (Get-Date)) AutorunsToWinEventLog already installed. Moving On."
    }

- name: Subscribe to events and add SIDs
  win_shell: |
    WECUtil qc /q
    Stop-Service Wecsvc

    $files="CustomEventChannels.dll","CustomEventChannels.man"
    $Path="$env:USERPROFILE\AppData\Local\Temp\windows-event-forwarding-master\windows-event-channels"
    foreach ($file in $files){
        Copy-Item -Path "$path\$file" -Destination C:\Windows\system32
    }

    wevtutil im C:\windows\system32\CustomEventChannels.man
    Start-Service Wecsvc

    $XMLFiles=Get-ChildItem "$env:USERPROFILE\AppData\Local\Temp\windows-event-forwarding-master\wef-subscriptions" | Where Extension -eq ".xml"
    foreach ($XMLFile in $XMLFiles){
      $SID=(Get-ADGroup -Identity $XMLFile.Basename).SID.Value
      $AllowedSourceDomainComputers="O:NSG:BAD:P(A;;GA;;;$SID)S:"
      [xml]$xml=get-content $XMLFile.FullName
      $xml.subscription.AllowedSourceDomainComputers=$AllowedSourceDomainComputers
      $xml.Save("$env:TEMP\temp.xml")
      wecutil cs "$env:TEMP\temp.xml"
    }
  vars:
    ansible_become: yes
    ansible_become_method: runas
    ansible_become_user: dac.local\deploy
    ansible_become_password: deploy
    ansible_become_flags: logon_type=new_credentials logon_flags=netcredentials_only